import datetime

yr = 2025

# Define the custom month ranges as tuples (start_month, end_month)
month_ranges = [(1, 1), (2, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 11), (12, 12)]

for idx, (start_month, end_month) in enumerate(month_ranges, 1):
    date_from = datetime.date(yr, start_month, 1).strftime("%m.%d.%Y")
    # Get the last day of the end_month
    if end_month == 12:
        date_to = datetime.date(yr, 12, 31).strftime("%m.%d.%Y")
    else:
        next_month = datetime.date(yr, end_month + 1, 1)
        date_to = (next_month - datetime.timedelta(days=1)).strftime("%m.%d.%Y")
    
    print(f"{idx}. date_from : {date_from},  date_to : {date_to}")



import datetime

def generate_month_ranges(year):
    current_year = datetime.date.today().year
    current_month = datetime.date.today().month

    # Define the original fixed ranges
    base_ranges = [(1, 1), (2, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 11), (12, 12)]
    result_ranges = []

    for start, end in base_ranges:
        if year < current_year:
            result_ranges.append((start, end))
        elif year == current_year:
            if start > current_month:
                break
            # If end is beyond current month, cut it off
            result_ranges.append((start, min(end, current_month)))
        else:
            break  # Future year, no ranges yet

    return result_ranges

# Example
month_ranges_2024 = generate_month_ranges(2024)
month_ranges_2025 = generate_month_ranges(2025)

print("2024 ranges:", month_ranges_2024)
print("2025 ranges:", month_ranges_2025)

